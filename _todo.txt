- dej na print output rezultate po casih
- èe tega nismo že: implementacija neke znane/uveljavljene metode
	* temeljito preišèi èlanke kaj je bilo na zadnje raziskovano (aktualne objave) in to implemenitraj, èe ni preveè zahtevno
	* ali dovolj je npr. da izboljšamo UCB1 ali UCB1tuned z našo metodo changePointDetection?
	* kaj toèno so uporabili pri HenkyPenky?? lahko s tisitm primerjamo?
- napiši proceduro za preizkus veè vrednosti parametrov (da roèno optimiziramo)
- napiši proceudro za avtomatsko optimizacijo parametrov
	* uèeèi avtomat
	* genetski algoritem
	* ... ?
- implementiraj razliène RESET algorithms v changePointDetection()
- izmeri kako dobro deluje kateri algoritem (pri optimiziranih parametrih)
	* z razliènimi changePointDetection
	* skupaj 4*3 = 12 optimizacij in meritev
	* ali definiramo še kakšne lastne testcase??
- križni testi, da ni overfittanja!
	* vzemi npr. pol primerov (pazi, da je enak delež tistih s fiksnimi avtomati in s spremenljivimi) in tam optimiziraj, na ostalih 5 pa evalviraj (mogoèe dodaj še 2 primera, da boš imel parno število obeh tipov)
	* ponovi npr. najboljših 5 rešitev iz prejšnje toèke, in naredi npr. 10 križnih testov ~ 50 optimizacij in meritev
- preizkusi "_ideje.txt"
	* predvsem nameri razliène naèine za reset UCBjev ko je change point detectan